name: Github Deploy  # 定义工作流的名称

on: [push]
#on:
#  push:
#    tags:
#      - '*'  # 监听所有标签的推送，或者可以根据需要指定标签模式，如 'v*' 表示所有以 v 开头的标签

defaults:
  run:
    shell: bash  # 默认使用 bash 作为 shell 来执行命令

jobs:
  # 作业1：构建并打包 Python 分发包
  build-distribution:
    name: Build distribution  # 设置作业名称
    runs-on: ubuntu-latest  # 指定运行环境为最新版本的 Ubuntu

    steps:
      # 1. Checkout 仓库代码
      - uses: actions/checkout@v4  # 使用 GitHub 官方的 checkout action 来拉取代码

      # 2. 缓存 Python 依赖项
      - name: Cache Python dependencies
        uses: actions/cache@v3  # 使用缓存 action 来加速依赖安装
        with:
          path: ~/.cache/pip  # 缓存路径
          key: ${{ runner.os }}-pip-cache-${{ hashFiles('**/requirements.txt') }}  # 缓存键，依赖文件变化时更新
          restore-keys: |
            ${{ runner.os }}-pip-cache-  # 备份的缓存键

      # 3. 设置 Python 环境
      - name: Set up Python
        uses: actions/setup-python@v4  # 使用 setup-python action 来设置 Python 环境
        with:
          python-version: "3.12"  # 使用 Python 3.12
          check-latest: true  # 检查 Python 是否是最新版本

      # 4. 创建并激活 Python 虚拟环境
      - name: Set up Python venv
        run: |
          python3 -m venv .venv  # 创建虚拟环境
          source .venv/bin/activate  # 激活虚拟环境
          python3 --version  # 查看 Python 版本
          python3 -m pip install --upgrade pip  # 升级 pip

      # 5. 安装系统依赖：libegl1
#      - name: Install libegl1
#        run: |
#          sudo apt update && sudo apt install -y libegl1  # 安装 libegl1，可能是依赖某些图形库

      # 6. 安装 setuptools 和 wheel
      - name: Install setuptools, wheel
        run: |
          python3 -m pip install setuptools wheel  # 安装构建工具 setuptools 和 wheel

      # 7. 安装项目依赖
      - name: Install requirements.txt
        run: |
          python3 -m pip install -r requirements.txt  # 安装项目依赖

      # 8. 下载最新的资产文件
#      - name: Download latest asset files
#        run: |
#          python3 -m pip install requests  # 安装 requests 库
#          python3 Deploy.py --download  # 执行自定义的 Deploy.py 脚本下载资产

      # 9. 构建源代码包和二进制包
#      - name: Build a binary wheel and a source tarball
#        run: python3 setup.py sdist bdist_wheel  # 构建源代码包和 wheel 包

      # 10. 上传构建的包为工件
#      - name: Store the distribution packages
#        uses: actions/upload-artifact@v3  # 使用 GitHub 的 upload-artifact action 上传构建的包
#        with:
#          name: python-package-distributions  # 上传的包名
#          path: |
#            dist/*.tar.gz  # 包含所有 .tar.gz 格式的源代码包
#            dist/*.whl  # 包含所有 .whl 格式的二进制包

  # 作业2：将包发布到 PyPI
  publish-to-pypi:
    name: Publish Python distribution to PyPI  # 设置作业名称
    # if: startsWith(github.ref, 'refs/tags/')  # only publish to PyPI on tag pushes
    if: false  # 设置 if 为 false，表示这个作业不会执行
    needs:
      - build-distribution  # 需要 build-distribution 作业先执行完成
      - deploy-binaries  # 需要 deploy-binaries 作业先执行完成
    runs-on: ubuntu-latest  # 运行环境
    environment:
      name: deploy-pypi  # 环境名称
      url: https://pypi.org/p/Furious-GUI  # PyPI 页面链接
    permissions:
      id-token: write  # 必须的权限，允许向 PyPI 发布

    steps:
      # 1. 下载构建的分发包
      - name: Download all the dists
        uses: actions/download-artifact@v3  # 下载先前上传的分发包
        with:
          name: python-package-distributions  # 上传的包名
          path: dist/  # 下载到 dist/ 目录

      # 2. 将分发包发布到 PyPI
      - name: Publish distribution to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1  # 使用 PyPI 官方的发布 action

  # 作业3：在多个操作系统上部署二进制文件
  deploy-binaries:
    name: Deploy binaries on ${{ matrix.os }}  # 设置作业名称
    runs-on: ${{ matrix.os }}  # 使用矩阵策略，分别在不同操作系统上运行
    strategy:
      matrix:
        os: [windows-2022, macos-13, macos-14]  # 在 Windows 和 macOS 上部署

    env:
      PYSIDE6_LEGACY_VERSION: "6.4.3"  # 设置环境变量，指定老版本的 PySide6
      PYSIDE6_TARGET_VERSION: "6.8.1"  # 设置目标版本的 PySide6

    steps:
      # 1. Checkout 仓库代码
      - uses: actions/checkout@v4  # 使用 checkout action 拉取代码

      # 2. 缓存 Python 依赖项
      - name: Cache Python dependencies
        uses: actions/cache@v3  # 使用缓存加速依赖安装
        with:
          path: ~/.cache/pip  # 缓存路径
          key: ${{ runner.os }}-pip-cache-${{ hashFiles('**/requirements.txt') }}  # 缓存键
          restore-keys: |
            ${{ runner.os }}-pip-cache-  # 备份的缓存键

      # 3. 设置 Python 环境
      - name: Set up Python
        uses: actions/setup-python@v4  # 设置 Python 环境
        with:
          python-version: "3.12"  # 使用 Python 3.12
          check-latest: true  # 检查是否是最新版本

      # 4. 创建并激活 Python 虚拟环境
      - name: Set up Python venv
        run: |
          python3 -m venv .venv  # 创建虚拟环境
          if [ "$RUNNER_OS" == "macOS" ]; then
            source .venv/bin/activate  # macOS 上激活虚拟环境
          elif [ "$RUNNER_OS" == "Windows" ]; then
            .venv/Scripts/activate  # Windows 上激活虚拟环境
          else
            echo "$RUNNER_OS not supported"  # 如果是其他操作系统则退出
            exit 1
          fi
          python3 --version  # 查看 Python 版本
          python3 -m pip install --upgrade pip  # 升级 pip

#      # 5. 安装 macOS 特定的依赖
#      - name: Install macOS dependencies
#        run: |
#          brew install create-dmg  # 在 macOS 上安装 create-dmg
#        if: runner.os == 'macOS'  # 仅在 macOS 上执行
#
#      # 6. 移除 macOS Intel 架构上的问题依赖
#      - name: Remove problematic brew libs on Intel Mac
#        run: |
#          brew remove --force --ignore-dependencies openssl@3  # 移除过期的 OpenSSL 库
#          brew cleanup openssl@3  # 清理依赖
#        if: runner.os == 'macOS' && runner.arch == 'X64'  # 仅在 Intel 架构的 macOS 上执行

      # 7. 安装 setuptools 和 wheel
      - name: Install setuptools, wheel
        run: |
          python3 -m pip install setuptools wheel  # 安装构建工具

      # 8. 安装 PySide6-Essentials
      - name: Install PySide6-Essentials
        run: |
          python3 -m pip install PySide6-Essentials==$PYSIDE6_TARGET_VERSION  # 安装指定版本的 PySide6

      # 9. 安装项目依赖
      - name: Install requirements.txt
        run: |
          python3 -m pip install -r requirements.txt  # 安装项目依赖
#
#      # 10. 安装 numpy<2
#      - name: Install numpy<2
#        run: |
#          # 安装 numpy 版本小于 2 的版本，以确保兼容性
#          python3 -m pip install "numpy<2"
#
#      - name: Install nuitka, imageio
#        run: |
#          # 安装 Nuitka 和 imageio，Nuitka 用于将 Python 代码编译成二进制文件，imageio 用于图像处理
#          python3 -m pip install nuitka imageio
#
#      - name: Set up go 1.20
#        uses: actions/setup-go@v4
#        with:
#          # 设置 Go 语言版本为 1.20，并确保使用最新版本
#          go-version: "1.20"
#          check-latest: true
#
#      - name: Install go 1.20 dependencies
#        run: |
#          # 安装 Go 语言版本 1.20 的依赖，并验证 Go 版本是否正确安装
#          go version
#          # 安装 hysteria 模块的版本大于 1.3.5
#          python3 -m pip install "hysteria > 1.3.5"
#
#      - name: Set up go 1.23
#        uses: actions/setup-go@v4
#        with:
#          # 设置 Go 语言版本为 1.23，并确保使用最新版本
#          go-version: "1.23"
#          check-latest: true
#
#      - name: Install go 1.23 dependencies
#        run: |
#          # 安装 Go 语言版本 1.23 的依赖，并验证 Go 版本是否正确安装
#          go version
#          # 安装 Xray-core 和 hysteria2 模块，确保它们的版本满足要求
#          python3 -m pip install "Xray-core >= 1.8.8" "hysteria2 >= 2.0.4" "tun2socks > 2.5.2"


#      - name: Run deploy script
#        run: python3 Deploy.py
        # 执行部署脚本，开始部署最新的版本

#      - name: Store the distribution packages
#        uses: actions/upload-artifact@v3
#        with:
#          name: binary-distributions
#          path: |
#            # 上传二进制分发包到 GitHub，以便在发布时使用
#            *.zip
#            *.dmg

  github-release:
    name: >-
      Upload to GitHub Release
    needs:
      - deploy-binaries
      # 依赖于 deploy-binaries 作业，即所有二进制文件都已准备好后才能执行
      # - publish-to-pypi  # 如果需要将发布内容上传到 PyPI，取消此行注释
    runs-on: ubuntu-latest
    # 在 Ubuntu 最新版本的虚拟环境中运行发布作业

    permissions:
      contents: write  # 需要写入 GitHub 内容库权限，用于创建发布
      id-token: write  # 需要写入 id-token 权限，用于与 GitHub 安全合作 (Sigstore)

    steps:
      # 确保 Git 仓库已经被检出
      - name: Checkout code
        uses: actions/checkout@v3

      # 下载之前上传到 GitHub Actions 的二进制文件分发包
#      - name: Download all the dists
#        uses: actions/download-artifact@v3
#        with:
#          name: binary-distributions
#          path: dist/


      # 使用 git log 自动生成 Release Notes
      - name: Generate Release Notes
        id: generate_notes
        run: |
          # 生成发布说明，使用 git log 从上次发布以来的提交信息生成说明
          echo "## 🚀 Release Notes" > release_notes.md
          # 生成自上次标签以来的提交日志，格式为：- commit_message (by author_name)
          git log $(git describe --tags --abbrev=0)..HEAD --reverse --pretty=format:"- %s (by %an)" >> release_notes.md
        shell: bash

      # 在创建 Release 时使用动态生成的 Release Notes
      - name: Create GitHub Release
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ github.ref_name }}  # 使用当前标签名
          release_name: Release ${{ github.ref_name }}  # Release 的名称
          body: ${{ steps.generate_notes.outputs.body }}  # 使用生成的 release notes
          draft: false  # 设置为 false，表示不是草稿
          prerelease: false  # 设置为 false，表示不是预发布

      - name: Upload artifact to GitHub Release
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}  # 使用 GitHub Secrets 中的 RELEASE_TOKEN
        run: >-
          # 使用 GitHub CLI 上传构建的二进制文件到 GitHub Release
          gh release upload
          '${{ github.ref_name }}' dist/**  # 使用当前标签上传所有构建的文件
          --repo '${{ github.repository }}'  # 指定当前仓库进行上传